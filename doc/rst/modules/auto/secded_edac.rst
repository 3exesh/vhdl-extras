.. Generated from ../rtl/extras/secded_edac.vhdl on 2017-04-20 23:04:37.090024
.. vhdl:package:: secded_edac


Types
-----


.. vhdl:type:: secded_error_kind

  Type of SECDED errors.

.. vhdl:type:: secded_errors

  Boolean bitfield for SECDED errors.

Subprograms
-----------


.. vhdl:function:: function secded_message_size(Data_size : positive) return positive;

  :param Data_size: Number of data bits
  :type Data_size: positive
  :returns:   Message size.

  Determine the size of a message (data interleaved with parity) given
  the size of data to be protected.

.. vhdl:function:: function secded_indices(Data_size : positive) return ecc_range;

  :param Data_size: Number of data bits
  :type Data_size: positive
  :returns:   Range with left and right.

  Return the left and right indices needed to declare an ecc_vector for the
  requested data size.

.. vhdl:function:: function secded_parity_size(Message_size : positive) return positive;

  :param Message_size: Number of bits in complete message
  :type Message_size: positive
  :returns:   Parity size.  

  Determine the number of parity bits for a given message size.

.. vhdl:function:: function secded_data_size(Message_size : positive) return positive;

  :param Message_size: Number of bits in complete message
  :type Message_size: positive
  :returns:   Data size.

  Determine the number of data bits for a given message size.

.. vhdl:function:: function secded_encode(Data : std_ulogic_vector) return ecc_vector;

  :param Data: Raw data
  :type Data: std_ulogic_vector
  :returns:   Encoded data with parity.

  Encode the supplied data into an ecc_vector using Hamming code for
  the parity and an additional overall parity for SECDED. This version
  uses self contained logic.

.. vhdl:function:: function secded_encode(Data : std_ulogic_vector; Parity_bits : unsigned) return ecc_vector;

  :param Data: Raw data
  :type Data: std_ulogic_vector
  :param Parity_bits: Number of parity bits
  :type Parity_bits: unsigned
  :returns:   Encoded data with parity.

  Encode the supplied data into an ecc_vector using Hamming code for
  the parity and an additional overall parity for SECDED. This version
  depends on external logic to generate the Hamming parity bits.

.. vhdl:function:: function secded_decode(Encoded_data : ecc_vector) return std_ulogic_vector;

  :param Encoded_data: Encoded (uninterleaved) message
  :type Encoded_data: ecc_vector
  :returns:   Decoded data.

  Decode an ecc_vector into the plain data bits, potentially correcting
  a single-bit error if a bit has flipped. This version uses self
  contained logic.

.. vhdl:function:: function secded_has_errors(Encoded_data : ecc_vector) return secded_errors;

  :param Encoded_data: Encoded (uninterleaved) message
  :type Encoded_data: ecc_vector
  :returns:   true if message has a single or double-bit error.

  Test for a single-bit and double-bit errors in an ecc_vector. Returns
  true for each error type.

.. vhdl:function:: function secded_has_errors(Encoded_data : ecc_vector; Syndrome : unsigned) return secded_errors;

  :param Encoded_data: Encoded (uninterleaved) message
  :type Encoded_data: ecc_vector
  :param Syndrome: Syndrome generated by hamming_parity()
  :type Syndrome: unsigned
  :returns:   true if message has a single or double-bit error.

  Test for a single-bit and double-bit errors in an ecc_vector. Returns
  true for each error type. This version depends on external logic to
  generate a syndrome.
